{"version":3,"sources":["GameLogic.js","MyAppBar.js","App.js","serviceWorker.js","index.js"],"names":["randint","min","max","Math","ceil","floor","random","packets","turn","winner","min_n","max_n","min_height","max_height","game_over","reduce","a","b","getRandomMove","nonZeroPackets","map","v","i","filter","_ref","x","length","packetNo","noOfChocos","make_move","_ref2","TypeError","concat","new_game","n","push","AI_move","xorSum","n_choco","useStyles","makeStyles","theme","root","flexGrow","menuButton","marginRight","spacing","title","HideAppBar","props","classes","newGameClick","aiEnabledChange","aiEnabledChecked","react_default","createElement","className","CssBaseline","AppBar","position","Toolbar","Typography","variant","FormControlLabel","control","Switch","checked","onChange","color","label","Button","onClick","OpenInNew_default","App","_Component","_getPrototypeOf2","_this","Object","classCallCheck","this","_len","arguments","args","Array","_key","possibleConstructorReturn","getPrototypeOf","call","apply","state","aiEnabled","selected","selection","packetIndex","chocoIndex","newGameBtnClick","e","updateGameState","aiEnabledOnChange","setState","target","hoverChoco","p","c","clickChoco","_this$state","n_chocos","setTimeout","inherits","createClass","key","value","_this2","_this$state2","Fragment","Container","Grid","container","alignItems","item","xs","lg","component","p_idx","style","border","toConsumableArray","c_idx","humanCanTurn","isSelected","shouldHighlight","md","ChocoSelectedIcon","ChocoIcon","onMouseEnter","onMouseLeave","fontSize","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.668a0c8e.chunk.js","sourcesContent":["function randint(min, max) {\r\n    min = Math.ceil(min);\r\n    max = Math.floor(max);\r\n    return Math.floor(Math.random() * (max - min + 1)) + min;\r\n}\r\n\r\nlet packets = []\r\nlet turn = 1\r\nlet winner = null\r\n\r\nconst min_n=3\r\nconst max_n=7\r\nconst min_height=1\r\nconst max_height=12\r\n  \r\nfunction game_over() {\r\n    return packets.reduce((a,b) => a + b, 0) === 0\r\n}\r\n\r\nfunction XOR_Sum() {\r\n    return packets.reduce((a, b) => a ^ b, 0)\r\n}\r\n\r\nfunction getRandomMove() {\r\n    let nonZeroPackets = packets.map((v, i) => {return {v: v, i: i}}).filter(({v, i}) => v !== 0)\r\n    let x = randint(0, nonZeroPackets.length - 1)\r\n    let p = nonZeroPackets[x].i\r\n    let n_chocos = randint(1, nonZeroPackets[x].v)\r\n    return { packetNo: p, noOfChocos: n_chocos}\r\n}\r\n\r\nfunction make_move({ packetNo, noOfChocos }) {\r\n    if (game_over())\r\n        return\r\n        \r\n    if (packetNo < 0 || packetNo >= packets.length)\r\n        return TypeError(`Packet number must be between 0 and ${packets.length}.`)\r\n    \r\n    if (noOfChocos < 1 || noOfChocos > packets[packetNo])\r\n        return TypeError(`There are only ${packets[packetNo]} chocolates in packet ${packetNo}.`)\r\n    \r\n    packets[packetNo] -= noOfChocos // the actual move\r\n\r\n    if (game_over())\r\n        winner = turn\r\n\r\n    turn = 3 - turn // alternate between 1 and 2\r\n}\r\n\r\nfunction new_game() {\r\n    packets = []\r\n    turn = 1\r\n    winner = null\r\n    let n = randint(min_n,max_n)\r\n    for (let i=0; i<n; i++)\r\n        packets.push(randint(min_height, max_height))\r\n}\r\n\r\nfunction AI_move() {\r\n    let xorSum = XOR_Sum()\r\n    if (xorSum !== 0) {\r\n        for (let i=0; i<packets.length; i++) {\r\n            let n_choco = packets[i]\r\n            if ((n_choco ^ xorSum) < n_choco) {\r\n                make_move({ packetNo: i, noOfChocos: n_choco - (n_choco ^ xorSum) })\r\n                return\r\n            }\r\n        }\r\n        make_move(getRandomMove())\r\n    } else {\r\n        make_move(getRandomMove())\r\n    }\r\n}\r\n\r\nfunction human_move(pkt_no, n_choco) {\r\n    make_move({ packetNo: pkt_no, noOfChocos: n_choco })\r\n}\r\n\r\nexport { packets, turn, winner, new_game, human_move, AI_move }\r\n","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Button from '@material-ui/core/Button';\r\nimport Icon from '@material-ui/icons/OpenInNew'\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel'\r\nimport Switch from '@material-ui/core/Switch'\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    root: {\r\n      flexGrow: 1,\r\n    },\r\n    menuButton: {\r\n      marginRight: theme.spacing(2),\r\n    },\r\n    title: {\r\n      flexGrow: 1,\r\n    },\r\n  }));\r\n\r\nexport default function HideAppBar(props) {\r\n  const classes = useStyles()\r\n  const { newGameClick, aiEnabledChange, aiEnabledChecked } = props\r\n  return (\r\n    <div className={classes.root}>\r\n    <CssBaseline />\r\n        <AppBar position=\"static\">\r\n          <Toolbar>\r\n            <Typography variant=\"h6\" className={classes.title}>\r\n              Choco Packets\r\n            </Typography>\r\n            <Typography variant=\"subtitle1\">\r\n              Opponent: \r\n              <FormControlLabel\r\n                control={<Switch checked={aiEnabledChecked} onChange={aiEnabledChange} color=\"secondary\"/>}\r\n                label={aiEnabledChecked ? \"AI\" : \"Human\"}\r\n              />\r\n            </Typography>\r\n            <Button color=\"inherit\" onClick={newGameClick}>\r\n                <Icon/>New Game\r\n            </Button>\r\n          </Toolbar>\r\n        </AppBar>\r\n    </div>\r\n  );\r\n}","import React, { Component } from 'react'\nimport { packets, turn, winner, new_game, human_move, AI_move } from './GameLogic'\nimport MyAppBar from './MyAppBar'\n\nimport Container from '@material-ui/core/Container'\nimport Grid from '@material-ui/core/Grid'\nimport ChocoIcon from '@material-ui/icons/Favorite'\nimport ChocoSelectedIcon from '@material-ui/icons/FavoriteBorder'\nimport Typography from '@material-ui/core/Typography'\n\nexport class App extends Component {\n  state = {\n    packets: [],\n    turn: 1,\n    winner: null,\n    aiEnabled: true,\n    selected: false,\n    selection: {\n      packetIndex: -1,\n      chocoIndex: -1\n    }\n  }\n\n  updateGameState() {\n    this.setState({\n      packets: packets,\n      turn: turn,\n      winner: winner\n    })\n  }\n\n  componentDidMount() {\n    new_game()\n    this.updateGameState()\n  }\n\n  newGameBtnClick = (e) => {\n    // TODO: ask the user\n    new_game()\n    this.updateGameState()\n  }\n\n  aiEnabledOnChange = (e) => {\n    this.setState({ aiEnabled: e.target.checked })\n  }\n\n  hoverChoco = (p, c) => {\n    if (p !== null && c !== null) {\n      this.setState({\n        selected: true,\n        selection: {\n          packetIndex: p,\n          chocoIndex: c\n        }\n      })\n    } else {\n      this.setState({\n        selected: false,\n        selection: {\n          packetIndex: -1,\n          chocoIndex: -1\n        }\n      })\n    }\n  }\n\n  clickChoco = () => {\n    const { selected, aiEnabled, turn } = this.state\n    if (selected && ((aiEnabled && turn === 1) || (!aiEnabled))) {\n      const { selection } = this.state\n      let n_chocos = this.state.packets[selection.packetIndex] - selection.chocoIndex\n      human_move(selection.packetIndex, n_chocos)\n      this.updateGameState()\n      if (aiEnabled)\n        setTimeout(() => {\n          AI_move()\n          this.updateGameState()\n        }, 1000);\n    }\n  }\n\n  render() {\n    const { packets, turn, winner, aiEnabled, selected, selection } = this.state\n\n    return (\n      <>\n        <MyAppBar \n          newGameClick={this.newGameBtnClick} \n          aiEnabledChange={this.aiEnabledOnChange} \n          aiEnabledChecked={this.state.aiEnabled} />\n        <Container>\n          <Grid container alignItems=\"center\">\n            <Grid item xs={12} lg={6} component={Typography} variant=\"h3\">\n              {winner !== null ? \"Game over\" : (aiEnabled ? \n              (turn === 1 ? \"Your turn\" : \"AI's turn...\") :\n              (turn === 1 ? \"Player 1's turn\" : \"Player 2's turn\"))}\n            </Grid>\n            <Grid item xs={12} lg={6} component={Typography} variant=\"h3\">\n              Winner: {winner && (aiEnabled ? \n              (winner === 1 ? \"Human\" : \"AI\") :\n              (\"Player \" + winner))}\n            </Grid>\n          </Grid>\n        </Container>\n        <Container>\n          {packets.map((p, p_idx) => (\n            <Grid container key={p_idx}>\n              <Grid item xs={1} component={Typography} variant=\"h2\">{p}:</Grid>\n              <Grid container item xs={11} alignItems=\"center\" style={{border: \"1px solid black\"}}>\n                {[...new Array(p)].map((c, c_idx) => {\n                  let humanCanTurn = (aiEnabled && turn === 1) || (!aiEnabled)\n                  let isSelected = selected && selection.packetIndex === p_idx && c_idx >= selection.chocoIndex\n                  let shouldHighlight = humanCanTurn && isSelected\n                  return (\n                  <Grid item xs={3} md={2} lg={1}\n                  component={shouldHighlight ? ChocoSelectedIcon : ChocoIcon}\n                  key={c_idx}\n                  onMouseEnter={() => this.hoverChoco(p_idx, c_idx)}\n                  onMouseLeave={() => this.hoverChoco(null, null)}\n                  onClick={() => this.clickChoco()}\n                  fontSize=\"large\"\n                  color={shouldHighlight  ? \"secondary\" : \"primary\"}\n                  />\n                )})}\n              </Grid>\n            </Grid>\n          ))}\n        </Container>\n      </>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}