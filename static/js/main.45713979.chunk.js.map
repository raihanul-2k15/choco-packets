{"version":3,"sources":["GameLogic.js","MyAppBar.js","App.js","serviceWorker.js","index.js"],"names":["randint","min","max","Math","ceil","floor","random","packets","humanTurn","winner","min_n","max_n","min_height","max_height","game_over","reduce","a","b","new_game","n","i","push","useStyles","makeStyles","theme","root","flexGrow","menuButton","marginRight","spacing","title","HideAppBar","props","classes","newGameClick","react_default","createElement","className","CssBaseline","AppBar","position","Toolbar","Typography","variant","Button","color","onClick","OpenInNew_default","App","_Component","_getPrototypeOf2","_this","Object","classCallCheck","this","_len","arguments","length","args","Array","_key","possibleConstructorReturn","getPrototypeOf","call","apply","concat","state","selected","selection","packetIndex","chocoIndex","newGameBtnClick","e","updateGameState","hoverChoco","p","c","setState","clickChoco","n_chocos","pkt_no","n_choco","TypeError","human_move","inherits","createClass","key","value","_this2","_this$state","Fragment","Container","Grid","container","alignItems","item","xs","lg","component","Divider","map","p_idx","style","border","toConsumableArray","c_idx","currentlySelected","md","ChocoSelectedIcon","ChocoIcon","onMouseEnter","onMouseLeave","fontSize","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.45713979.chunk.js","sourcesContent":["function randint(min, max) {\r\n    min = Math.ceil(min);\r\n    max = Math.floor(max);\r\n    return Math.floor(Math.random() * (max - min + 1)) + min;\r\n}\r\n\r\nlet packets = []\r\nlet humanTurn = true\r\nlet winner = null\r\n\r\nconst min_n=3\r\nconst max_n=7\r\nconst min_height=1\r\nconst max_height=12\r\n  \r\nfunction game_over() {\r\n    return packets.reduce((a,b) => a + b, 0) == 0\r\n}\r\n\r\nfunction XOR_Sum() {\r\n    return packets.reduce((a, b) => a ^ b, 0)\r\n}\r\n\r\nfunction AI_randomMove() {\r\n    let p = randint(0, packets.length)\r\n    while (packets[p] == 0)\r\n        p = randint(0, packets.length)\r\n    let n_choco = randint(1, packets[p])\r\n    packets[p] -= n_choco\r\n}\r\n\r\nfunction new_game() {\r\n    packets = []\r\n    humanTurn = true\r\n    winner = null\r\n    let n = randint(min_n,max_n)\r\n    for (let i=0; i<n; i++)\r\n        packets.push(randint(min_height, max_height))\r\n}\r\n\r\nfunction AI_move() {\r\n    if (game_over())\r\n        return\r\n    \r\n    let xorSum=XOR_Sum()\r\n    if (xorSum != 0) {\r\n        let move_done = false\r\n        for (let i=0; i<packets.length; i++) {\r\n            let n_choco = packets[i]\r\n            if ((n_choco ^ xorSum) < n_choco) {\r\n                packets[i] -= n_choco ^ xorSum\r\n                move_done = true\r\n                break\r\n            }\r\n        }\r\n        if (!move_done) {\r\n            AI_randomMove()\r\n        }\r\n    } else {\r\n        AI_randomMove()\r\n    }\r\n\r\n    if (game_over())\r\n        winner = \"AI\"\r\n    \r\n    humanTurn = !humanTurn\r\n}\r\n\r\nfunction human_move(pkt_no, n_choco) {\r\n    if (game_over())\r\n        return\r\n\r\n    if (pkt_no < 0 || pkt_no >= packets.length)\r\n        return TypeError(`Packet number must be between 0 and ${packets.length}.`)\r\n    \r\n    if (n_choco < 1 || n_choco > packets[pkt_no])\r\n        return TypeError(`There are only ${packets[pkt_no]} chocolates in packet ${pkt_no}.`)\r\n    \r\n    packets[pkt_no] -= n_choco\r\n    \r\n    if (game_over())\r\n        winner = \"Human\"\r\n    \r\n    humanTurn = !humanTurn\r\n}\r\n\r\nexport { packets, humanTurn, winner, new_game, human_move, AI_move }\r\n","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Button from '@material-ui/core/Button';\r\nimport Icon from '@material-ui/icons/OpenInNew'\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    root: {\r\n      flexGrow: 1,\r\n    },\r\n    menuButton: {\r\n      marginRight: theme.spacing(2),\r\n    },\r\n    title: {\r\n      flexGrow: 1,\r\n    },\r\n  }));\r\n\r\nexport default function HideAppBar(props) {\r\n  const classes = useStyles()\r\n  const { newGameClick } = props\r\n  return (\r\n    <div className={classes.root}>\r\n    <CssBaseline />\r\n        <AppBar position=\"static\">\r\n          <Toolbar>\r\n            <Typography variant=\"h6\" className={classes.title}>Choco Packets</Typography>\r\n            <Button color=\"inherit\" onClick={newGameClick}>\r\n                <Icon/>New Game\r\n            </Button>\r\n          </Toolbar>\r\n        </AppBar>\r\n    </div>\r\n  );\r\n}","import React, { Component } from 'react'\nimport { packets, humanTurn, winner, new_game, human_move, AI_move } from './GameLogic'\nimport MyAppBar from './MyAppBar'\n\nimport Container from '@material-ui/core/Container'\nimport Grid from '@material-ui/core/Grid'\nimport ChocoIcon from '@material-ui/icons/Favorite'\nimport ChocoSelectedIcon from '@material-ui/icons/FavoriteBorder'\nimport { Divider, Typography } from '@material-ui/core';\n\nexport class App extends Component {\n  state = {\n    packets: [],\n    humanTurn: true,\n    winner: null,\n    selected: false,\n    selection: {\n      packetIndex: -1,\n      chocoIndex: -1\n    }\n  }\n\n  updateGameState() {\n    this.setState({\n      packets,\n      humanTurn,\n      winner\n    })\n  }\n\n  componentDidMount() {\n    new_game()\n    this.updateGameState()\n  }\n\n  newGameBtnClick = (e) => {\n    // TODO: ask the user\n    new_game()\n    this.updateGameState()\n  }\n\n  hoverChoco = (p, c) => {\n    if (p !== null && c !== null) {\n      this.setState({\n        selected: true,\n        selection: {\n          packetIndex: p,\n          chocoIndex: c\n        }\n      })\n    } else {\n      this.setState({\n        selected: false,\n        selection: {\n          packetIndex: -1,\n          chocoIndex: -1\n        }\n      })\n    }\n  }\n\n  clickChoco = (p, c) => {\n    if (this.state.selected) {\n      const { selection } = this.state\n      let n_chocos = this.state.packets[selection.packetIndex] - selection.chocoIndex\n      human_move(selection.packetIndex, n_chocos)\n      //alert(selection.packetIndex + ' ' + n_chocos)\n      this.updateGameState()\n    }\n  }\n\n  render() {\n    const { packets, humanTurn, winner, selected, selection } = this.state\n\n    return (\n      <React.Fragment>\n        <MyAppBar newGameClick={this.newGameBtnClick}/>\n        <Container>\n          <Grid container alignItems=\"center\">\n            <Grid item xs={12} lg={6} component={Typography} variant=\"h3\">\n              {humanTurn ? \"Your turn!\" : \"AI's turn...\"}\n            </Grid>\n            <Grid item xs={12} lg={6} component={Typography} variant=\"h3\">\n              Winner: {winner !== null ? winner : \"\"}\n            </Grid>\n          </Grid>\n          <Divider />\n          {packets.map((p, p_idx) => (\n            <Grid container key={p_idx}>\n              <Grid item xs={1} component={Typography} variant=\"h2\">{p}:</Grid>\n              <Grid container item xs={11} alignItems=\"center\" style={{border: \"1px solid black\"}}>\n                {[...new Array(p)].map((c, c_idx) => {\n                  let currentlySelected = selected && selection.packetIndex === p_idx && c_idx >= selection.chocoIndex\n                  return (\n                  <Grid item xs={3} md={2} lg={1}\n                  component={currentlySelected ? ChocoSelectedIcon : ChocoIcon}\n                  key={c_idx}\n                  onMouseEnter={() => this.hoverChoco(p_idx, c_idx)}\n                  onMouseLeave={() => this.hoverChoco(null, null)}\n                  onClick={() => this.clickChoco()}\n                  fontSize=\"large\"\n                  color={currentlySelected ? \"secondary\" : \"primary\"}\n                  />\n                )})}\n              </Grid>\n            </Grid>\n          ))}\n          {winner === null ? (\n          <Typography variant=\"h6\">\n            {humanTurn ? \"Your turn\" : \"AI's turn...\"}\n          </Typography>\n          ) : (\n          <Typography variant=\"h4\">\n            Winner: {winner}\n          </Typography>\n          )}\n        </Container>\n      </React.Fragment>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}